import React, { useState } from 'react';
import { ImageIcon, DownloadIcon } from 'lucide-react';

export function GeneratorForm() {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;
  
    setIsGenerating(true);
    setError(null);
    setGeneratedImage(null);
  
    try {
      const response = await fetch('http://localhost:5000/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate image');
      }
  
      const blob = await response.blob();
      const imageUrl = URL.createObjectURL(blob);
      setGeneratedImage(imageUrl);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadImage = () => {
    if (!generatedImage) return;
    const link = document.createElement('a');
    link.href = generatedImage;
    link.download = 'generated-image.png';
    link.click();
  };

  return (
    <div className="flex flex-col items-center w-full gap-6 max-w-3xl">
      <form onSubmit={handleSubmit} className="w-full">
        <div className="w-full mb-4">
          <label htmlFor="prompt" className="w-full block text-gray-300 font-medium mb-2">
            Describe the image you want to generate
          </label>
          <div className="flex md:flex-row flex-col items-stretch w-full gap-6">
            <input
              id="prompt"
              type="text"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              className="flex-grow px-4 py-3 text-gray-800 bg-white border border-gray-600 rounded-xl focus:outline-none h-[56px] overflow-y-auto"
              placeholder="E.g., A serene landscape with mountains and a lake at sunset"
              required
            />
            <button
              type="submit"
              disabled={isGenerating}
              className={`h-[56px] px-6 bg-blue-500 text-white rounded-xl hover:bg-blue-700 transition-colors flex items-center justify-center ${isGenerating ? 'opacity-70 cursor-not-allowed' : ''}`}
            >
              {isGenerating ? (
                <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                <>
                  <ImageIcon className="h-5 w-5 mr-2" />
                  Generate Image
                </>
              )}
            </button>
          </div>
        </div>
      </form>

      <div className="w-full p-4 rounded-xl shadow-md bg-gray-300 flex flex-col justify-center items-center min-h-[500px]">
        {error && <p className="text-red-600 text-sm mb-4">{error}</p>}
        {generatedImage ? (
          <>
            <h3 className="font-medium text-white text-lg mb-4">Generated Image</h3>
            <div className="relative w-full">
              <img
                src={generatedImage}
                alt="AI generated"
                className="w-full h-auto rounded-md"
              />
              <div className="absolute bottom-3 right-3 bg-white bg-opacity-70 px-2 py-1 rounded text-xs">
                Generated by MarkAI
              </div>
            </div>
            <div className="mt-4 flex justify-end w-full">
              <button
                onClick={downloadImage}
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
              >
                <DownloadIcon className="mr-2 h-4 w-4" />
                Download Image
              </button>
            </div>
          </>
        ) : (
          <p className="text-gray-600 text-center">
            {isGenerating ? 'Generating image...' : 'Generated image will appear here'}
          </p>
        )}
      </div>
    </div>
  );
}